/*
  DEV: this is supposed to become an up-to-date reading list synced from my PC
*/

import React from "react"
import Link from "gatsby-link"
import { Table, Responsive, Header, List, Label, Item, Icon, Grid, Container } from 'semantic-ui-react'
import "isomorphic-fetch"
import { spacer } from "../common"
import Papa from 'papaparse'

const _URL = 'https://raw.githubusercontent.com/joetm/jonaso/master/reading_list/readinglist.csv'

//dev
const documents = [
  {
    fname: '++++++++++++D07-1074.pdf',
    title: 'TITLE HERE',
    author: 'AUTHOR HERE',
    year: '2000',
    keywords: ''
  },
  {
    fname: '+++++++++AAAI06-223.pdf',
    title: 'TITLE HERE',
    author: 'AUTHOR HERE',
    year: '2000',
    keywords: ''
  },
  {
    fname: '+++++++++ECIS_2009_taxonomy_final_3.pdf',
    title: 'TITLE HERE',
    author: 'AUTHOR HERE',
    year: '2000',
    keywords: ''
  },
  {
    fname: 'FOIS98.pdf',
    title: 'TITLE HERE',
    author: 'AUTHOR HERE',
    year: '2000',
    keywords: ''
  },
]


class ReadingList extends React.Component {
  state = {
    documents: [],
  }
  componentWillMount = () => {
    Papa.parse(_URL, {
      download: true,
      delimiter: "|",
      header: true,
      trimHeaders: true,
      dynamicTyping: false,
      preview: 0,
      encoding: "utf-8",
      // worker: false,
      // comments: false,
      // step: undefined,
      // error: undefined,
      skipEmptyLines: true,
      // chunk: undefined,
      // fastMode: undefined,
      // beforeFirstChunk: undefined,
      complete: results => {
        // console.log(results)
        this.setState({documents: results.data})
      }
    })
  }
  render() {
    const { documents } = this.state
    return (
      <div>
        <Container>

              <Header size="large">Reading List</Header>

<Table celled>
    <Table.Header>
      <Table.Row>
        <Table.HeaderCell>Filename</Table.HeaderCell>
        <Table.HeaderCell>Title</Table.HeaderCell>
        <Table.HeaderCell>Author</Table.HeaderCell>
        <Table.HeaderCell>Author Keywords</Table.HeaderCell>
        <Table.HeaderCell># Pages</Table.HeaderCell>
      </Table.Row>
    </Table.Header>
    <Table.Body>
              {
                documents.map((doc, idx) => {
                  return (
                    <Table.Row key={`row_${idx}`}>
                      <Table.Cell textAlign="left" width="one"><Label>{doc.filename}</Label></Table.Cell>
                      <Table.Cell textAlign="left">{doc.title}</Table.Cell>
                      <Table.Cell textAlign="left" width="two">{doc.author}</Table.Cell>
                      <Table.Cell textAlign="left" width="two">{doc.keywords}</Table.Cell>
                      <Table.Cell textAlign="left" width="one">{doc.numPages}</Table.Cell>
                    </Table.Row>
                  )
                })
              }
  </Table.Body>
</Table>

            <div style={spacer}></div>

        </Container>
      </div>
    )
  }
}

export default ReadingList
