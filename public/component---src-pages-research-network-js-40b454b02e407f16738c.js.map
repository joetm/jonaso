{"version":3,"file":"component---src-pages-research-network-js-40b454b02e407f16738c.js","mappings":"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","sources":["webpack://jonaso.de/./src/pages/research/network.js"],"sourcesContent":["import 'semantic-ui-css/components/dropdown.min.css'\n\nimport React from \"react\"\nimport Layout from \"../../components/layout\"\nimport { Seo } from \"../../components/Seo\"\nimport { spacer } from \"../../common\"\n\n// fix window SSR error\n// import ForceGraph2D from 'react-force-graph-2d'\n// import { ForceGraph2D } from 'react-force-graph'\nimport loadable from '@loadable/component'\nconst ForceGraph2D = loadable(() => import('react-force-graph-2d'))\n\n\n// const _PUBLICATIONS = 'https://raw.githubusercontent.com/joetm/jonaso/master/public/static/publications.json'\nconst _PUBLICATIONS = '/static/publications.json'\n\n\nexport function Head() {\n  return (\n    <Seo title=\"Collaboration Network // jonaso.de\">\n      <link id=\"canonical\" rel=\"canonical\" href=\"https://www.jonaso.de/influencers\" />\n    </Seo>\n  ) //\n}\n\n\nfunction buildAuthorname(a) {\n  let authorname = a.given + ' ' + (a['dropping-particle'] ? a['dropping-particle'] + ' ' : '') + a.family\n  if (authorname === 'Jonas OppenlÃ¤nder') {\n    authorname = 'Jonas Oppenlaender'\n  }\n  return authorname\n}\n\n\nclass CollaborationNetwork extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      nodes: [],\n      edges: [],\n      mincollabs: 1,\n      isLoading: true,\n    }\n    this.gContainer = React.createRef()\n  }\n  componentDidMount = () => {\n    fetch(_PUBLICATIONS)\n    .then(response => {\n      if (response.status >= 400) {\n        throw new Error(\"Bad response from server\")\n      }\n      return response.json()\n    })\n    .then(publications => {\n      const uniquenodes = {}\n      const uniqueedges = {}\n      const nodes = []\n      const edges = []\n      const _self = 'Jonas Oppenlaender'\n      publications.forEach(pub => {\n        if (pub.author) {\n          pub.author.forEach(a => {\n            let authorname = buildAuthorname(a)\n            // NODES\n            if (!uniquenodes[authorname]) {\n              let group = 2\n              if (authorname === _self) {\n                group = 1\n              }\n              uniquenodes[authorname] = { id: authorname, group }\n            }\n            // EDGES\n            // edges to all other co-authors of this publication\n            if (authorname !== _self) { // skip self\n              // edge to JO\n              pub.author.forEach(a2 => {\n                let authorname2 = buildAuthorname(a2)\n                //skip self\n                if (authorname2 !== authorname) {\n                  if (!uniqueedges[authorname + '-' + authorname2]) {\n                    uniqueedges[authorname + '-' + authorname2] = { source: authorname, target: authorname2, val: 1 }\n                  } else {\n                    uniqueedges[authorname + '-' + authorname2].val += 1\n                  }\n                }\n              })\n            }\n          })\n        }\n      })\n      Object.keys(uniquenodes).forEach(key => {\n        nodes.push(uniquenodes[key])\n      })\n      Object.keys(uniqueedges).forEach(key => {\n        // only add unidirectional edges\n        // const [source, target] = key.split('-')\n        // if (!uniqueedges[target + '-' + source]) {\n          edges.push(uniqueedges[key])\n        // }\n      })\n      this.setState({ nodes, edges, isLoading: false })\n    })\n  }\n  changeFilter = (e) => {\n    this.setState({ mincollabs: e.target.value })\n  }\n  render() {\n    const { nodes, edges, mincollabs, isLoading } = this.state\n    const graph = {\n      nodes,\n      links: edges.filter(e => e.val >= mincollabs),\n    }\n\n    return (\n      <Layout>\n        <div className=\"ui container\">\n          <h2 style={{float:'left', display:'inline-block'}}>\n            Collaboration Network\n            { isLoading && <span style={{marginLeft: '1em', fontWeight: 100, fontSize: '1em'}}>...loading...</span>}\n          </h2>\n          <div style={{float:'right'}}>\n            # publications: {' '}\n            <select className=\"ui inline compact selection dropdown\" onChange={this.changeFilter}>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n              <option value=\"5\">5</option>\n            </select>\n          </div>\n          <div\n            style={{clear:'both'}}\n            ref={(ref) => this.gContainer = ref}\n          >\n\n            <ForceGraph2D\n              graphData={graph}\n              width={this.gContainer.offsetWidth}\n              height={600}\n              backgroundColor=\"#FAFAFA\"\n              nodeAutoColorBy=\"group\"\n              linkWidth=\"val\"\n              nodeCanvasObject={(node, ctx, globalScale) => {\n                const label = node.id\n                const fontSize = 12/globalScale\n                ctx.font = `${fontSize}px sans-serif`\n                const textWidth = ctx.measureText(label).width\n                const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2) // some padding\n                ctx.fillStyle = 'rgba(255, 255, 255, 0.8)'\n                // ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions)\n                ctx.textAlign = 'center'\n                ctx.textBaseline = 'middle'\n                ctx.fillStyle = node.color\n                ctx.fillText(label, node.x, node.y)\n                node.__bckgDimensions = bckgDimensions // to re-use in nodePointerAreaPaint\n              }}\n              nodePointerAreaPaint={(node, color, ctx) => {\n                ctx.fillStyle = color\n                const bckgDimensions = node.__bckgDimensions\n                bckgDimensions && ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions)\n              }}\n            />\n\n          </div>\n\n          <div style={spacer}></div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default CollaborationNetwork\n"],"names":["ForceGraph2D","Head","Seo","title","id","rel","href","buildAuthorname","a","authorname","given","family","props","componentDidMount","fetch","then","response","status","Error","json","publications","uniquenodes","uniqueedges","nodes","edges","_self","forEach","pub","author","group","a2","authorname2","val","source","target","Object","keys","key","push","setState","isLoading","changeFilter","e","mincollabs","value","state","gContainer","React","render","this","graph","links","filter","className","style","float","display","marginLeft","fontWeight","fontSize","onChange","clear","ref","graphData","width","offsetWidth","height","backgroundColor","nodeAutoColorBy","linkWidth","nodeCanvasObject","node","ctx","globalScale","label","font","bckgDimensions","measureText","map","n","fillStyle","textAlign","textBaseline","color","fillText","x","y","__bckgDimensions","nodePointerAreaPaint","fillRect","spacer"],"sourceRoot":""}